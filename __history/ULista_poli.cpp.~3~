//---------------------------------------------------------------------------

#pragma hdrstop

#include "ULista_poli.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

Polinomio::Polinomio(){
	pol = new ListaP;
}

bool Polinomio::es_cero(){
	return pol->vacia();
}

int Polinomio::grado(){
direccion_p dir = pol->siguiente(pol->primero());
	if (dir != NULL) {
		int maxg = pol->recuperar(dir);
		while (dir != NULL){
			if (pol->recuperar(dir) > maxg)
				maxg = pol->recuperar(dir);
			dir = pol->siguiente(pol->siguiente(dir));
		}
	return maxg;
	}
return 0;
}

int Polinomio::coeficiente(int exp){
direccion_p dir;
	if (dir != NULL) {
		return pol->recuperar(pol->anterior(dir));
	}
	return 0;
}

void Polinomio::asignar_coeficiente(int coef, int exp){
	direccion_p dir;
	if (dir != NULL) {
		direccion_p dir_coef = pol->anterior(dir);
//		pol->modifica(dir_coef, coef);
		if (coef == 0) {
//			pol->suprime(dir);
//			pol->suprime(dir_coef);
		}
	}
	cout << "Error";
}

void Polinomio::poner_termino(int coef, int exp){
direccion_p dir_exp;
	if (dir_exp != NULL) {
		direccion_p dir_coef = pol->anterior(dir_exp);
//		pol->modifica(dir_coef, pol->recuperar(dir_coef) + coef);
//		if (pol->recuperar(dir_coef) == 0) {
//			pol->suprime(dir_exp);
//            pol->suprime(dir_coef);
//		}
	}
}
