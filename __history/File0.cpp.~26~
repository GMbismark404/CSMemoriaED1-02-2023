#include <iostream>
#include <tchar.h>
#include <string>
#include "UMemoria.h"
#include "UListaP.h"
#include "UConjunto_lista.h"
#include "UListaS.h"
#include "UListaV.h"

using namespace std;

void MenuCSMemoria();
void MenuLista_CSMemoria();
void MenuLista_p();
void MenuLista_v();
void MenuConjuntoLista();
void Menu();


int main() {
	Menu();
	system("pause");
	return 0;
}

void Menu(){
	cout << "1. CSMemoria" << endl;
	cout << "2. ListaP" << endl;
	cout << "3. ListaS" << endl;
	cout << "4. Conjunto Lista" << endl;
	cout << "5. Terminar programa" << endl;
	int opcion;
	do{
	cout << "Opcion: ";
	cin >> opcion;
		switch (opcion) {
			case 1: {
				MenuCSMemoria();
			} break;
			case 2: {
				MenuLista_p();
			} break;
			case 3: {
				MenuLista_CSMemoria();
			} break;
			case 4: {
				MenuConjuntoLista();
			} break;
			case 5: {
				cout << "PROGRAMA FINALIZADO" << endl;
			} break;
			default: {
				cout << "ERRO/Fuera de rango, intentar de nuevo: " << endl;
			}
		}
	}while (opcion != 3);

}

void MenuConjuntoLista(){
	ConjuntoL *conj[3];
	cout << "1. Crear Conjunto" << endl;
	cout << "2. Insertar Elemento" << endl;
	cout << "3. Mostrar Conjunto" << endl;
	cout << "4. Unir y poner en C el resultado" << endl;
	cout << "5. Insertar y poner en C el resultado" << endl;
	cout << "6. Salir" << endl;
	int opcion,i,j,elemento;
	do{
	cout << "Opcion: ";
	cin >> opcion;
	fflush(stdin);
		switch (opcion) {
			case 1: {
				cout << "1. conjunto A " << endl;
				cout << "2. conjunto B " << endl;
				cout << "3. conjunto C " << endl;
				cin >> i;
				if ((i > -1) && (i < 4)) {
					conj[i-1] = new ConjuntoL();
				}else{
					cout << "ERROR/Fuera de rango, no se a creado ningun conjunto intentar de nuevo" << endl;
				}
			} break;
			case 2: {
				cout << "1. En el conjunto A " << endl;
				cout << "2. En el conjunto B " << endl;
				cout << "3. En el conjunto C " << endl;
				cin >> j;
				if ((j > -1) && (j < 4)) {
					cout << "Elemento: "; cin >> elemento;
					conj[j-1]->inserta(elemento);
				}else{
					cout << "ERROR/Fuera de rango, intentar de nuevo" << endl;
				}
			} break;
			case 3: {
				conj[i-1]->mostrar_conjunto();
			} break;
			case 4: {

			} break;
			case 8: {
				cout << "PROGRAMA FINALIZADO" << endl;
			} break;
			default: {
				cout << "ERRO/Fuera de rango, intentar de nuevo: " << endl;
				cout << "Opcion: ";
			}
		}
	}while (opcion != 8);
}

void MenuLista_p(){
ListaP *ptr;
int opcion;
cout << "1. Crear Lista" << endl;
cout << "2. Insertar" << endl;
cout << "3. Inserta siguiente primero" << endl;
cout << "4. Insertar anterio fin" << endl;
cout << "5. Mostrar Lista" << endl;
cout << "6. Salir" << endl;
	do{
	cout << "Opcion: ";
	cin >> opcion;
		switch (opcion) {
			case 1: {
				ptr = new ListaP;
				cout << "Lista Creada" << endl;
			} break;
			case 2: {
				int dato;
				cout << "Insertar dato: ";
				cin >> dato;
				ptr->insertar(ptr->primero(), dato);
			} break;
			case 5: {
				ptr->Mostrar();
				cout << endl;
			} break;
			case 6: {
				cout << "PROGRAMA FINALIZADO";
			} break;
			default: {
				cout << "ERRO/Fuera de rango, intentar de nuevo: " << endl;
			}
		}
	}while (opcion != 7);
}

void MenuLista_v(){
ListaV *v;
int opcion, dato;
cout << "1. Crear Lista" << endl;
cout << "2. Insertar" << endl;
cout << "3. Insertar primero" << endl;
cout << "4. Insertar ultimo" << endl;
cout << "5. Mostrar" << endl;
cout << "6. Salir" << endl;
	do{
		switch (opcion) {
			case 1: {
				v = new ListaV;
			} break;
			case 2: {
				cin >> dato;
				v->insertar(v->primero(), dato);
			} break;
			case 3: {

			} break;
			case 4: {

			} break;
			case 5: {
                v->Mostrar();
			} break;
			case 6: {
				cout << "PROGRAMA FINALIZADO";
			} break;
		default:
			cout << "ERRO/Fuera de rango, intentar de nuevo: " << endl;
		}
	} while(1);
}

void MenuCSMemoria(){
CSMemoria *mem;
int opcion;
cout << "1. Crear" << endl;
cout << "2. Pedir espacio" << endl;
cout << "3. Liberar espacio" << endl;
cout << "4. Poner dato" << endl;
cout << "5. Mostrar Memoria" << endl;
cout << "6. Mostrar Lista" << endl;
	do{
//  fflush(stdin);
	cout << "Opcion: ";
	cin >> opcion;
		switch (opcion) {
			case 1: {
				mem = new CSMemoria();
				cout << "Memoria creada \n\n";
			} break;
			case 2: {
				string ids;
				cout << "ids: ";
				cin.ignore();
				getline(cin, ids);
				mem->new_espacio(ids);
			} break;
			case 3: {
				int dir_delete;
				cout << "Direccion a liberar: ";
				cin >> dir_delete;
				mem->delete_espacio(dir_delete);
			} break;
			case 4: {
				int dir, valor;
				string id;
				cout << "Direccion: " << endl;
				cin >> dir;
				cout << "Id: " << endl;
				cin.ignore();
				getline(cin, id);
				cout << "valor: " << endl;
				cin >> valor;
				mem->poner_dato(dir, id, valor);
			} break;
			case 5: {
				mem->Mostrar();
			} break;
		}
	}while (opcion != 6);
}

void MenuLista_CSMemoria(){
ListaS *cs;
int opcion, elemento;
cout << "1. Crear Lista" << endl;
cout << "2. Insertar" << endl;
cout << "3. Insertar primero" << endl;
cout << "4. Insertar ultimo" << endl;
cout << "5. Inserta siguiente primero" << endl;
cout << "6. Insertar anterio fin" << endl;
cout << "7. Mostrar Lista" << endl;
cout << "8. Salir" << endl;
	do{
	cout << "Opcion: ";
	cin >> opcion;
		switch (opcion) {
			case 1: {
				cs = new ListaS;
				cout << "Lista Creada" << endl;
			} break;
			case 2: {
				cout << "Insertar elemento: ";
				cin >> elemento;
				cs->insertar(cs->primero(),elemento);
			} break;
			case 3: {
                cout << "Insertar elemento: ";
				cin >> elemento;
				cs->insertar_primero(elemento);
			} break;
			case 4: {
				cout << "Insertar elemento: ";
				cin >> elemento;
				cs->insertar_ultimo(elemento);
			} break;
			case 5: {
				cout << "Insertar elemento: ";
				cin >> elemento;
				cs->insertar(cs->siguiente(cs->primero()),elemento);
			} break;
			case 6: {
				cout << "Insertar elemento: ";
				cin >> elemento;
				cs->insertar(cs->anterior(cs->fin()),elemento);
			} break;
			case 7: {
				cs->Mostrar();
				cout << endl;
			} break;
			case 8: {
				cout << "PROGRAMA FINALIZADO";
			} break;
			default: {
				cout << "ERRO/Fuera de rango, intentar de nuevo: " << endl;
			}
		}
	}while (opcion != 8);
}

