//---------------------------------------------------------------------------

#pragma hdrstop

#include "UListaP.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

ListaP::ListaP(){
	ptrElementos = NULL;
	longitud = 0;
}

direccion_p ListaP::primero(){
	if (!vacia()) {
		return ptrElementos;
	}else{
		cout << "ERROR/primero(): Lista vacia";
    }
}

direccion_p ListaP::fin(){
	if (vacia()) {
		cout << "ERROR/fin(): Lista vacia";
	}else{
		direccion_p x = ptrElementos;
		direccion_p ptrfin;
		while (x != NULL){
			ptrfin = x;
			x = x->sig;
		}
    return ptrfin;
    }
}

direccion_p ListaP::siguiente(direccion_p p){
	if (vacia()) {
		cout << "ERROR/siguiente(p direccion): Lista vacia";
	}else{
		if (p == fin()) {
			cout << "Direccion primera";
		}else{
			return p->sig;
		}
	}
}

direccion_p ListaP::anterior(direccion_p p){
	if (vacia()) {
		cout << "ERROR/anterior(): Lista vacia";
	}else{
		direccion_p x = ptrElementos;
		direccion_p ant = NULL;
		while(x != NULL){
			if(x == p){
				return ant;
			}
		 ant = x;
		 x = x->sig;
		}
	 return NULL;
	}
}

bool ListaP::vacia(){
	return longitud == 0;
}

int ListaP::recuperar(direccion_p p){
	if (vacia()) {
		cout << "ERROR/recuperar: Lista vacia";
	}else{
		return p->elemento;
    }
}

int ListaP::Longitud(){
	return longitud;
}

void ListaP::insertar(direccion_p p, int element){
NodoL* x=new NodoL;
  if(x!=NULL){
	x->elemento=element;
	x->sig=NULL;
	if(vacia()){ //caso1 lista vacia
		ptrElementos=x;
		longitud=1;
	}else{
	   if( p==primero()){ //caso 2 inserta de primero
		  x->sig = p;
		  ptrElementos=x;
	   }else{    //caso 3 a la izq de la direccion
		 direccion_p ant = anterior(p);
		 ant->sig=x;
		 x->sig = p;
	   }
	   longitud++;
    }
  }
}

void ListaP::insertar_primero(int element){
NodoL *x = new NodoL;
  if(x != NULL){
	x->elemento=element;
	x->sig=ptrElementos;
	ptrElementos=x;
	longitud++;
  }
}

void ListaP::insertar_ultimo(int element){
NodoL* x = new NodoL;
  if (x != NULL) {
		x->elemento = element;
		x->sig = NULL;
		if (vacia())
			ptrElementos = x;
		else
			fin()->sig = x;
		longitud++;

  } else{
	  cout<<"ERROR:No existe espacio en la memoria\n";
  }
}
