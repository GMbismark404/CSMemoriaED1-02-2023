#include <iostream>
#include <tchar.h>
#include <string>
#include "UMemoria.h"
#include "UListaP.h"

using namespace std;

void MenuCSMemoria();
void MenuLista_p();
void Menu();


int main() {
	Menu();
	system("pause");
	return 0;
}

void Menu(){
	cout << "1. CSMemoria" << endl;
	cout << "2. ListaP" << endl;
	cout << "3. Terminar programa" << endl;
	int opcion;
	do{
	cout << "Opcion: ";
	cin >> opcion;
		switch (opcion) {
			case 1: {
				MenuCSMemoria();
			} break;
			case 2: {
				MenuLista_p();
			} break;
			case 3: {
				cout << "PROGRAMA FINALIZADO" << endl;
			} break;
			default: {
				cout << "ERRO/Fuera de rango, intentar de nuevo: " << endl;
			}
		}
	}while (opcion != 3);

}

void MenuLista_p(){
ListaP *ptr;
int opcion;
cout << "1. Crear Lista" << endl;
cout << "2. Inserta primero" << endl;
cout << "3. Inserta siguiente primero" << endl;
cout << "4. Insertar anterio fin" << endl;
cout << "5. Mostrar Lista" << endl;
cout << "6. Salir" << endl;
	do{
	cout << "Opcion: ";
	cin >> opcion;
		switch (opcion) {
			case 1: {
				ptr = new ListaP;
				cout << "Lista Creada" << endl;
			} break;
			case 2: {
            	int dato;
				cout << "Insertar dato: ";
				cin >> dato;
				ptr->insertar(ptr->primero(), dato);
			} break;
			case 5: {
				ptr->Mostrar();
				cout << endl;
			} break;
			case 6: {
				cout << "PROGRAMA FINALIZADO";
			} break;
            default: {
				cout << "ERRO/Fuera de rango, intentar de nuevo: " << endl;
			}
		}
	}while (opcion != 6);
}

void MenuCSMemoria(){
CSMemoria *mem;
int opcion;
cout << "1. Crear" << endl;
cout << "2. Pedir espacio" << endl;
cout << "3. Liberar espacio" << endl;
cout << "4. Poner dato" << endl;
cout << "5. Mostrar Memoria" << endl;
cout << "6. Mostrar Lista" << endl;
	do{
//  fflush(stdin);
	cout << "Opcion: ";
	cin >> opcion;
		switch (opcion) {
			case 1: {
				mem = new CSMemoria();
				cout << "Memoria creada \n\n";
			} break;
			case 2: {
				string ids;
				cout << "ids: ";
				cin.ignore();
				getline(cin, ids);
				mem->new_espacio(ids);
			} break;
			case 3: {
				int dir_delete;
				cout << "Direccion a liberar: ";
				cin >> dir_delete;
				mem->delete_espacio(dir_delete);
			} break;
			case 4: {
				int dir, valor;
				string id;
				cout << "Direccion: " << endl;
				cin >> dir;
				cout << "Id: " << endl;
				cin.ignore();
				getline(cin, id);
				cout << "valor: " << endl;
				cin >> valor;
				mem->poner_dato(dir, id, valor);
			} break;
			case 5: {
				mem->Mostrar();
			} break;
		}
	}while (opcion != 6);
}

